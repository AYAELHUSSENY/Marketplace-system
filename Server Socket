user_lock = threading.Lock()
purchases_lock = threading.Lock()
buy_lock = threading.Lock()
HEADER = 64
PORT = 5050
SERVER = socket.gethostbyname(socket.gethostname())
ADDR = (SERVER, PORT)
FORMAT = 'utf-8'
DISCONNECT_MESSAGE = "!DISCONNECT"
server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
server.bind(ADDR)
def send(json_obj, conn, addr):
    msg_to_send = json_obj.encode(FORMAT)
    msg_length = len(msg_to_send)
    send_length = str(msg_length).encode(FORMAT)
    send_length += b' ' * (HEADER - len(send_length))
    conn.send(send_length)
    conn.send(msg_to_send)
    
def send_pickle(pickle_obj, conn, addr):
    msg_length = len(pickle_obj)
    send_length = str(msg_length).encode(FORMAT)
    send_length += b' ' * (HEADER - len(send_length))
    conn.send(send_length)
    conn.send(pickle_obj)
def handle_client(conn, addr):
    print(f"[CLIENT CONNECTED] {addr} connected.\n")
    connnected = True
    while(connnected):
        try:
            msg_length = conn.recv(HEADER).decode(FORMAT)  # blocking line wait till client give msg!! args is no of bytes we recive (by header)
            # decode from coded(byte) to data (utf-8) string
            # recive 64 bytes contain number of bytes then decode
        except:
            print(f"[CONNECTION FAILED] connection with {addr} unexpectedly failed..\n")
            connnected = False
            break
        if msg_length:
            msg_length = int(msg_length) # convert string (result of decode into number)
            msg = conn.recv(msg_length).decode(FORMAT) # receive len of bytes and decode each one
            if msg == DISCONNECT_MESSAGE: # if msg is !Disconect just leave connection with server
                print(f"[CLIENT DISCONNECT] client of Address {addr} disconnected..\n")
                connnected = False
                break
            # return_obj = pickle.loads(msg)
            data_obj = json.loads(msg)  # load and return dictionary

            ##LOGIC
            print(f"[{addr}] {data_obj}\n")  # here we printed msg only (logic)
            if data_obj['request'] == LOGIN:
                login(data_obj, conn, addr)
            elif data_obj['request'] == CREATE_ACCOUNT:
                signup(data_obj, conn, addr)
            elif data_obj['request'] == GET_ITEMS:
                getItems(data_obj, conn, addr)
            elif data_obj['request'] == GET_BALANCE:
                getBalance(data_obj, conn, addr)
            elif data_obj['request'] == DEPOSIT:
                deposit(data_obj, conn, addr)
            elif data_obj['request'] == GET_PROFILE:
                getProfile(data_obj, conn, addr)
            # elif data_obj['request'] == EDIT_PROFILE:
            #     editProfile(data_obj, conn, addr)
            # elif data_obj['request'] == CHANGE_PASSWORD:
            #     passChange(data_obj, conn, addr)
            # elif data_obj['request'] == SEARCH:
            #     searchItems(data_obj, conn, addr)
            elif data_obj['request'] == ADD_ITEM:
                addToCart(data_obj, conn, addr)
            # elif data_obj['request'] == REMOVE_ITEM:
            #     deleteFromCart(data_obj, conn, addr)
            elif data_obj['request'] == GET_CART:
                showCart(data_obj, conn, addr)
            elif data_obj['request'] == PURCHASE:
                purchase(data_obj, conn, addr)
            # elif data_obj['request'] == HISTORY:
            #     history(data_obj, conn, addr)
            # elif data_obj['request'] == 'Add_Item':
            #     addItem(data_obj, conn, addr)

    conn.close() #disconnect connection

def start():
    server.listen()
    print(f"[LISTENING] Server is listening on {SERVER}")
    while True:
        conn, addr = server.accept()
        thread = threading.Thread(target=handle_client, args=(conn, addr))
        thread.start()
        print(f"[ACTIVE CONNECTIONS] {threading.activeCount() - 1}")


print("[STARTING] server is starting...")
start()
