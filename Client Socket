HEADER = 64
PORT = 5050
FORMAT = 'utf-8'
DISCONNECT_MESSAGE = "!DISCONNECT"
SERVER = socket.gethostbyname(socket.gethostname())
ADDR = (SERVER, PORT)
client = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
client.connect(ADDR)
def write_file(data, filename):
    file = open(filename, 'wb')
    file.write(data)
def send(msg): # "Ahmed" => [bytes bytes bytes bytes] [HEADER msg]
    message = msg.encode(FORMAT) # byte format encoded msg #  '123' => bytes b'x/ab24' => ['4'.encode => 15bytes]
    msg_length = len(message) # bytes(encoded msg) format length 2
    send_length = str(msg_length).encode(FORMAT) # encoded length of bytes msg as string
    send_length += b' ' * (HEADER - len(send_length)) # for padding till 64 of header
    client.send(send_length)  # to send header
    client.send(message) # massage

    # client receive response from server
    response_length = client.recv(HEADER).decode(FORMAT)  # '4'
    if response_length:
        response_length = int(float(response_length))  # 4
        response_msg = client.recv(response_length)
        try:
            response_msg_json = response_msg.decode(FORMAT)  # json
            response_msg_json = json.loads(response_msg_json) # json -> dicto
            # print(f"[SERVER RESPONSE] {response_msg_json}")  # some number of bytes
        except:
            response_msg = pickle.loads(response_msg)  # json -> dicto
            directory = "assests"
            parent_dir = os.getcwd()
            path = os.path.join(parent_dir, directory)
            if (os.path.exists(path) == False):
                # create folder
                os.mkdir(path)

            # mapping bytes -> name
            caption = 'Image'
            # print(response_msg)
            if (response_msg['msg'] == 'cart'):
                caption = 'Cart'
            elif (response_msg['msg'] == 'img'):
                caption = 'Image'
            for i in range(len(response_msg['items'])):
                write_file(response_msg['items'][i][2],
                           f"{path}\\" + caption + str(i) + ".jpeg")
                response_msg['items'][i] = list(response_msg['items'][i])
                response_msg['items'][i][2] = caption + str(i) + ".jpeg"
                response_msg['items'][i] = tuple(response_msg['items'][i])
            # print(f"[SERVER RESPONSE] {response_msg}")  # some number of bytes
    result = json.loads(response_msg.decode('utf-8'))
    return result
